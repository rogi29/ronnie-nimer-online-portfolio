---
import Icon from "astro-icon";
import { builder, type BuilderContent } from "@builder.io/sdk";
import ResponsivePicture from "../../components/core/ResponsivePicture.astro";
import ShowcaseAsset from "../../components/project/ShowcaseAsset.astro";
import ProjectLayout from "../../layouts/ProjectLayout.astro";
import { DOMAIN_NAME } from "../../consts/site";
import Presentation from "../../components/project/Presentation.astro";
import { ElementTag, type VideoMetadata } from "../../types/ElementMetadata";
import { buildProjectLink } from "../../data/navLinks";
import type { Props as ResponsivePictureProps } from "../../components/core/ResponsivePicture.astro";

export const PROJECT_MODEL_ID = "project";
export const BUILDER_API_KEY = import.meta.env.BUILDER_API_PUBLIC_KEY;

export async function getStaticPaths({}) {
  const pages = await builder.getAll(PROJECT_MODEL_ID, {
    fields: "data",
    options: { noTargeting: true },
    apiKey: BUILDER_API_KEY,
  });
  return pages.map(({ data }) => ({
    params: { slug: data?.url?.replace("/", "") },
    props: data,
  }));
}

const { slug } = Astro.params;
const { title, description, image } = Astro.props;

const route = buildProjectLink(slug ?? "");
const url = `https://${DOMAIN_NAME}/project/${slug}`;
const entry: BuilderContent | undefined = await builder.get(PROJECT_MODEL_ID, {
  url: `/${slug}`,
  cachebust: true,
  apiKey: BUILDER_API_KEY,
});

let galleryIndex = -1;
let links: string[] = [];
---

<ProjectLayout {title} {description} {image} {url} {route}>
  <main slot="main">
    <>
      {
        (entry?.data?.blocks ?? [])
          .filter((block) => block["@type"] === "@builder.io/sdk:Element")
          .map((block) => {
            const options = block.component?.options ?? {};
            const externalTarget = block.properties?.target;
            const externalLink = block.properties?.href;
            const externalTitle = block.properties?.linkTitle;
            const imagelink = (options.altText ?? block.properties?.alt ?? "")
              .toLowerCase()
              .replaceAll(" ", "-");
            const presentationLink = `#gallery-${imagelink}`;

            switch (block.component?.name?.toLowerCase()) {
              case "text":
                if (block.tagName === "paragraph") {
                  return (
                    <div>
                      <Fragment set:html={block.component?.options?.text ?? ""} />
                    </div>
                  )
                }
                if (externalLink) {
                  return (
                    <div class="textWrapper">
                      <Fragment set:html={block.component?.options?.text ?? ""} />
                      <a href={externalLink} target={externalTarget} title={externalTitle}>
                        <Icon
                          pack="mdi"
                          name="external-link"
                          aria-hidden="true"
                          style={{ color: "rgb(var(--primaryColor))" }}
                        />
                      </a>
                    </div>
                  );
                }
                return (
                  <Fragment set:html={block.component?.options?.text ?? ""} />
                );
              case "custom code":
                return (
                  <Fragment set:html={block.component?.options?.code ?? ""} />
                );
              case "core:button":
                return (
                  <a href={options?.link ?? ""} role="button">{options?.text ?? ""}</a>
                );
              case "video":
                links.push(imagelink);
                galleryIndex++;

                const mp4Source = block.properties?.mp4;
                const srcSplit = options.video?.split(".")
                const videoExt = srcSplit ? srcSplit[srcSplit.length - 1] : "webm"
                const sources: VideoMetadata["src"] = []
                if (mp4Source && videoExt !== "mp4") {
                  sources.push({ url: mp4Source, type: `video/mp4` })
                }
                if (options.video) {
                  sources.push({ url: options.video, type: `video/${videoExt}` })
                }
                const video: VideoMetadata = {
                  tag: ElementTag.VIDEO,
                  src: sources,
                  poster: options.poster,
                  title: block.properties?.alt ?? "",
                  id: block.properties?.alt ?? "",
                  autoplay: options.autoPlay ?? false,
                  loop: options.loop ?? false,
                  controls: options.controls ?? false
                }
                return (
                  <ShowcaseAsset
                    id={imagelink}
                    {presentationLink}
                    {externalLink}
                    {externalTarget}
                  >
                    <video
                      poster={video.poster}
                      title={video.title}
                      playsinline={true}
                      preload="none"
                      autoplay={video.autoplay}
                      loop={video.loop}
                      controls={video.controls}
                      muted
                    >
                      {video.src.map(({ url, type }) => (
                        <source src={url} {type}></source>
                      ))}
                    </video>
                    <Presentation
                      index={galleryIndex}
                      element={video}
                      links={links}
                    />
                  </ShowcaseAsset>
                );
              case "image":
                links.push(imagelink);
                galleryIndex++;

                const image: ImageMetadata = {
                  tag: ElementTag.IMG,
                  id: options.altText,
                  src: options.image,
                  title: options.altText,
                  alt: options.altText,
                  originalWidth: options.width,
                  originalHeight: options.height,
                  loading: block?.properties?.loading ?? "lazy",
                  fetchpriority: block?.properties?.priority ?? "auto",
                };
                return (
                  <ShowcaseAsset
                    id={imagelink}
                    {presentationLink}
                    {externalLink}
                    {externalTarget}
                  >
                    <ResponsivePicture
                      src={image.src}
                      title={image.title}
                      alt={image.alt}
                      width={image.originalWidth}
                      height={image.originalHeight}
                      loading={image.loading}
                      fetchpriority={image.fetchpriority}
                      placeholder={"blur"}
                      size={2}
                    />
                    <Presentation
                      index={galleryIndex}
                      element={image}
                      links={links}
                    />
                  </ShowcaseAsset>
                );
            }
          })
      }
    </>
  </main>
</ProjectLayout>
